From c5ac47a302d562552aef8af8b0cfafb05defc8db Mon Sep 17 00:00:00 2001
From: Rohan Ghosh <iamronnie40@gmail.com>
Date: Thu, 21 May 2020 10:03:04 +0000
Subject: [PATCH] Create Patch File

---
 client3.py     | 20 +++++++++-----------
 client_test.py | 26 ++++++++++++++++++++++++++
 2 files changed, 35 insertions(+), 11 deletions(-)

diff --git a/client3.py b/client3.py
index f1771c3..73634c0 100644
--- a/client3.py
+++ b/client3.py
@@ -30,30 +30,28 @@ QUERY = "http://localhost:8080/query?id={}"
 N = 500
 
 def getDataPoint(quote):
-	""" Produce all of the needed values to generate a datapoint """
-	""" ------------- Update this function ------------- """
 	stock = quote['stock']
 	bid_price = float(quote['top_bid']['price'])
 	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
+	price = (bid_price + ask_price) / 2
 	return stock, bid_price, ask_price, price
 
 def getRatio(price_a, price_b):
-	""" Get ratio of price_a and price_b """
-	""" ------------- Update this function ------------- """
-	""" Also create some unit tests for this function in client_test.py """
-	return 1
+	if price_b == 0 :
+    return
+  else:
+    return 1
 
 # Main
 if __name__ == "__main__":
 
 	# Query the price once every N seconds.
-	for _ in iter(range(N)):
+	for _ in range(N) :
 		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
-
-		""" ----------- Update to get the ratio --------------- """
+    prices = {}
 		for quote in quotes:
 			stock, bid_price, ask_price, price = getDataPoint(quote)
+      prices[stock] = price
 			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-		print ("Ratio %s" % getRatio(price, price))
+		print ("Ratio %s" % (getRatio(prices['ABC'] , prices['DEF'])))
diff --git a/client_test.py b/client_test.py
index af2bf26..3e73d02 100644
--- a/client_test.py
+++ b/client_test.py
@@ -8,6 +8,8 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote) , (quote['stock'] , quote['top_bid']['price'] , quote['top_ask']['price'] , (quote['top_bid']['price'] + quote['top_ask']['price']) / 2))
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,11 +17,35 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes :
+      self.assertEqual(getDataPoint(quote) , (quote['stock'] , quote['top_bid']['price'] , quote['top_ask']['price'] , (quote['top_bid']['price'] + quote['top_ask']['price']) / 2))
 
 
   """ ------------ Add more unit tests ------------ """
+  def test_getRatio_withPriceAzero(self) :
+    priceA = 0
+    priceB = 83.2
+    self.assertEqual(getRatio(priceA , priceB) , 0)
 
+  def test_getRatio_withPriceBzero(self) :
+    priceA = 12
+    priceB = 0
+    self.assertiSNone(getRatio(priceA , priceB))
 
+  def test_getRatio_resultGreaterThan1(self) :
+    priceA = 103
+    priceB = 8.8
+    self.assertGreater(getRatio(priceA , priceB) , 1)
+
+  def test_getRatio_resultLessThan1(self) :
+    priceA = 33.8
+    priceB = 109
+    self.assertLess(getRatio(priceA , priceB) , 1)
+
+  def test_getRatio_resultExactltOne(self) :
+    priceA = 121
+    priceB = 121
+    self.assertEqual(getRatio(priceA , priceB) , 1)
 
 if __name__ == '__main__':
     unittest.main()
-- 
2.17.1

